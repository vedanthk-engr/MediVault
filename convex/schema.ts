import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";
import { authTables } from "@convex-dev/auth/server";

const applicationTables = {
  // Medical supply categories
  categories: defineTable({
    name: v.string(),
    description: v.string(),
    color: v.string(), // For UI color coding
  }),

  // Suppliers information
  suppliers: defineTable({
    name: v.string(),
    contactEmail: v.string(),
    contactPhone: v.string(),
    address: v.string(),
    isActive: v.boolean(),
    performanceRating: v.number(), // 1-5 rating
    averageDeliveryTime: v.number(), // in days
  }),

  // Medical supplies/items
  supplies: defineTable({
    name: v.string(),
    description: v.string(),
    categoryId: v.id("categories"),
    supplierId: v.id("suppliers"),
    sku: v.string(), // Stock Keeping Unit
    barcode: v.optional(v.string()),
    rfidTag: v.optional(v.string()),
    unitOfMeasure: v.string(), // "pieces", "boxes", "vials", etc.
    unitCost: v.number(),
    minimumStock: v.number(),
    maximumStock: v.number(),
    reorderPoint: v.number(),
    reorderQuantity: v.number(),
    isControlledSubstance: v.boolean(),
    requiresRefrigeration: v.boolean(),
    shelfLifeDays: v.optional(v.number()), // null for non-expiring items
    isActive: v.boolean(),
  })
    .index("by_category", ["categoryId"])
    .index("by_supplier", ["supplierId"])
    .index("by_sku", ["sku"])
    .index("by_barcode", ["barcode"])
    .searchIndex("search_supplies", {
      searchField: "name",
      filterFields: ["categoryId", "isActive"],
    }),

  // Inventory batches (for expiration tracking)
  inventoryBatches: defineTable({
    supplyId: v.id("supplies"),
    batchNumber: v.string(),
    quantity: v.number(),
    expirationDate: v.optional(v.number()), // timestamp
    receivedDate: v.number(), // timestamp
    cost: v.number(),
    location: v.string(), // storage location
    isQuarantined: v.boolean(),
    notes: v.optional(v.string()),
  })
    .index("by_supply", ["supplyId"])
    .index("by_expiration", ["expirationDate"])
    .index("by_location", ["location"]),

  // Stock movements (transactions)
  stockMovements: defineTable({
    supplyId: v.id("supplies"),
    batchId: v.optional(v.id("inventoryBatches")),
    movementType: v.union(
      v.literal("in"), // receiving stock
      v.literal("out"), // dispensing/using stock
      v.literal("adjustment"), // manual adjustment
      v.literal("expired"), // expired items removal
      v.literal("damaged"), // damaged items removal
      v.literal("transfer") // location transfer
    ),
    quantity: v.number(),
    previousQuantity: v.number(),
    newQuantity: v.number(),
    reason: v.string(),
    performedBy: v.union(v.id("users"), v.literal("system")),
    location: v.string(),
    notes: v.optional(v.string()),
    orderId: v.optional(v.id("purchaseOrders")),
  })
    .index("by_supply", ["supplyId"])
    .index("by_user", ["performedBy"])
    .index("by_type", ["movementType"]),

  // Purchase orders
  purchaseOrders: defineTable({
    orderNumber: v.string(),
    supplierId: v.id("suppliers"),
    status: v.union(
      v.literal("draft"),
      v.literal("pending"),
      v.literal("approved"),
      v.literal("sent"),
      v.literal("received"),
      v.literal("cancelled")
    ),
    totalAmount: v.number(),
    expectedDeliveryDate: v.optional(v.number()),
    actualDeliveryDate: v.optional(v.number()),
    createdBy: v.id("users"),
    approvedBy: v.optional(v.id("users")),
    notes: v.optional(v.string()),
    isAutoGenerated: v.boolean(),
  })
    .index("by_supplier", ["supplierId"])
    .index("by_status", ["status"])
    .index("by_created_by", ["createdBy"]),

  // Purchase order items
  purchaseOrderItems: defineTable({
    orderId: v.id("purchaseOrders"),
    supplyId: v.id("supplies"),
    quantity: v.number(),
    unitCost: v.number(),
    totalCost: v.number(),
    receivedQuantity: v.number(),
  })
    .index("by_order", ["orderId"])
    .index("by_supply", ["supplyId"]),

  // Alerts and notifications
  alerts: defineTable({
    type: v.union(
      v.literal("low_stock"),
      v.literal("expiring_soon"),
      v.literal("expired"),
      v.literal("anomaly"),
      v.literal("reorder_needed")
    ),
    supplyId: v.id("supplies"),
    title: v.string(),
    message: v.string(),
    severity: v.union(
      v.literal("low"),
      v.literal("medium"),
      v.literal("high"),
      v.literal("critical")
    ),
    isRead: v.boolean(),
    isResolved: v.boolean(),
    assignedTo: v.optional(v.id("users")),
    resolvedBy: v.optional(v.id("users")),
    resolvedAt: v.optional(v.number()),
  })
    .index("by_supply", ["supplyId"])
    .index("by_type", ["type"])
    .index("by_severity", ["severity"])
    .index("by_status", ["isRead", "isResolved"]),

  // User roles and permissions
  userRoles: defineTable({
    userId: v.id("users"),
    role: v.union(
      v.literal("admin"),
      v.literal("manager"),
      v.literal("pharmacist"),
      v.literal("nurse"),
      v.literal("technician"),
      v.literal("viewer")
    ),
    permissions: v.array(v.string()), // granular permissions
    department: v.optional(v.string()),
    isActive: v.boolean(),
  })
    .index("by_user", ["userId"])
    .index("by_role", ["role"]),

  // Audit trail
  auditLogs: defineTable({
    userId: v.id("users"),
    action: v.string(),
    entityType: v.string(), // "supply", "order", "batch", etc.
    entityId: v.string(),
    oldValues: v.optional(v.string()), // JSON string
    newValues: v.optional(v.string()), // JSON string
    ipAddress: v.optional(v.string()),
    userAgent: v.optional(v.string()),
  })
    .index("by_user", ["userId"])
    .index("by_entity", ["entityType", "entityId"]),

  // Usage analytics for predictive modeling
  usageAnalytics: defineTable({
    supplyId: v.id("supplies"),
    date: v.string(), // YYYY-MM-DD format
    quantityUsed: v.number(),
    department: v.optional(v.string()),
    dayOfWeek: v.number(), // 0-6
    month: v.number(), // 1-12
    isHoliday: v.boolean(),
    weatherCondition: v.optional(v.string()), // for seasonal analysis
  })
    .index("by_supply_date", ["supplyId", "date"])
    .index("by_date", ["date"])
    .index("by_supply", ["supplyId"]),

  // System settings
  systemSettings: defineTable({
    key: v.string(),
    value: v.string(),
    description: v.string(),
    category: v.string(),
  })
    .index("by_key", ["key"])
    .index("by_category", ["category"]),
};

export default defineSchema({
  ...authTables,
  ...applicationTables,
});
